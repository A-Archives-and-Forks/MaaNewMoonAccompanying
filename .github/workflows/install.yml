name: install

on:
  push:
    tags:
      - "v*"
    # branches:
    #   - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**.json"
      - "ci/**"
  pull_request:
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  workflow_dispatch:

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          is_release=${{ startsWith(github.ref, 'refs/tags/v') }}
          tag=$(git describe --tags --match "v*" ${{ github.ref }} || true)
          if [[ $tag != v* ]]; then
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ $tag != v* ]]; then
              tag="v0.0.0"
            fi
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi
          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}

  install:
    needs: meta
    runs-on: windows-latest
    strategy:
      matrix:
        # os: [win, macos, linux, android]
        # arch: [x86_64, aarch64]
        include:
          - os: win
            arch: x86_64
          - os: macos
            arch: aarch64
          - os: linux
            arch: x86_64
          # - os: android
          #   arch: aarch64
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download MaaFramework
        uses: robinraju/release-downloader@v1
        with:
          repository: MaaXYZ/MaaFramework
          fileName: "MAA-${{ matrix.os }}-${{ matrix.arch }}*"
          latest: true
          out-file-path: "deps"
          extract: true

      - name: Setup Embed Python
        shell: powershell
        run: |
          ./ci/setup_embed_python.ps1

      - name: Install Python
        shell: bash
        env:
          TARGET_OS: ${{ matrix.os }}
        run: |
          python ./ci/install.py ${{ needs.meta.outputs.tag }}

      - name: Set up MFAAvalonia naming
        id: mfa_naming
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "win" ]; then
            echo "mfa_os=win" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "macos" ]; then
            echo "mfa_os=osx" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "linux" ]; then
            echo "mfa_os=linux" >> $GITHUB_OUTPUT
          else
            echo "mfa_os=unknown" >> $GITHUB_OUTPUT
          fi

          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            echo "mfa_arch=x64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.arch }}" = "aarch64" ]; then
            echo "mfa_arch=arm64" >> $GITHUB_OUTPUT
          else
            echo "mfa_arch=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Download MFA
        if: ${{ matrix.os != 'android' && steps.mfa_naming.outputs.mfa_os != 'unknown' && steps.mfa_naming.outputs. mfa_arch != 'unknown' }}
        uses: robinraju/release-downloader@v1
        with:
          repository: SweetSmellFox/MFAAvalonia
          fileName: "MFAAvalonia-*-${{ steps.mfa_naming.outputs.mfa_os }}-${{ steps.mfa_naming.outputs.mfa_arch }}*"
          latest: true
          out-file-path: "MFAAvalonia"
          extract: true

      - name: Install MFAAvalonia
        if: ${{ matrix.os != 'android' }}
        shell: bash
        run: |
          rm -rf MFAAvalonia/resource/base/model
          cp -r MFAAvalonia/* install

      - name: Encode Pipeline Name
        shell: bash
        run: |
          python -m pip install pypinyin
          python ./ci/encode_pipeline_name.py

      - name: Replace Icon
        shell: bash
        run: |
          cp logo.ico install/Assets/logo.ico

      - name: Packing Launcher
        if: ${{matrix.os == 'win' }}
        working-directory: launcher
        shell: bash
        run: |
          python -m pip install pyinstaller
          pyinstaller --onefile --icon=../logo.ico --windowed MNMA.py

      - name: Packing GC
        if: ${{matrix.os == 'win' }}
        working-directory: gc
        shell: bash
        run: |
          python -m pip install pyinstaller
          pyinstaller --onefile --icon=./gc.ico 安全清理小工具.py

      - name: Install Tools
        if: ${{matrix.os == 'win' }}
        shell: bash
        run: |
          cp launcher/dist/MNMA.exe install/MNMA.exe
          cp gc/dist/安全清理小工具.exe install/安全清理小工具.exe

      - uses: actions/upload-artifact@v4
        with:
          name: MaaNewMoonAccompanying-${{ matrix.os }}-${{ matrix.arch }}
          path: "install"

  release:
    # if: ${{ needs.meta.outputs.is_release == 'true' || github.event_name == 'workflow_dispatch' }}
    if: ${{ needs.meta.outputs.is_release == 'true'}}
    needs: [meta, install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: assets

      - name: Clean up MFAAvalonia zip
        run: |
          cd assets
          rm -f */MFAAvalonia-*.zip

      - name: Build MNMA
        run: |
          cd assets
          for f in *; do
            (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)
          done

      - uses: softprops/action-gh-release@v2.2.2
        with:
          files: assets/*
          tag_name: ${{ needs.meta.outputs.tag }}
          generate_release_notes: true

      - name: Trigger MirrorChyanUploading
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
